name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    # Linting removed from CI/CD pipeline
    # - name: Run linter
    #   run: npm run lint

    # - name: Run formatter check
    #   run: npx prettier --check "src/**/*.{js,jsx,ts,tsx}" "server/**/*.{js}"

    - name: Run tests
      run: npm test -- --coverage --watchAll=false

    - name: Build application
      run: npm run build

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info

  security:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level moderate

    - name: Run dependency check
      run: npx npm-check-updates --errorLevel 2

  deploy:
    runs-on: ubuntu-latest
    needs: [test, security]  # Only deploy if tests and security pass
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'  # Only deploy on push to main

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to DigitalOcean Droplet
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.UNLICENSEDDRIVINGSCHOOLIP }}
        username: root
        key: ${{ secrets.UNLICENSEDDRIVERSSH }}
        script: |
          # Set deployment directory
          APP_DIR="/var/www/compliance-portal"
          BACKUP_DIR="/var/www/backups"

          echo "🚀 Starting deployment to $APP_DIR"

          # Create backup of current deployment
          if [ -d "$APP_DIR" ]; then
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            echo "📦 Creating backup: compliance-portal_$TIMESTAMP"
            sudo tar -czf "$BACKUP_DIR/compliance-portal_$TIMESTAMP.tar.gz" -C /var/www compliance-portal 2>/dev/null || true
          fi

          # Navigate to app directory (create if doesn't exist)
          if [ ! -d "$APP_DIR" ]; then
            echo "📁 Creating application directory"
            sudo mkdir -p "$APP_DIR"
            sudo chown -R $USER:$USER "$APP_DIR"
            cd "$APP_DIR"
            git clone https://github.com/${{ github.repository }} .
          else
            cd "$APP_DIR"
            echo "🔄 Updating existing deployment"
            git fetch origin
            git reset --hard origin/main
          fi

          # Install dependencies
          echo "📦 Installing dependencies"
          npm ci --production=false

          # Copy production environment file
          if [ -f ".env.production" ]; then
            cp .env.production .env
            echo "✅ Environment configured"
          else
            echo "⚠️  Warning: .env.production not found, using existing .env"
          fi

          # Build application
          echo "🔨 Building application"
          npm run build

          # Ensure data directories exist
          sudo mkdir -p /var/www/data /var/www/uploads /var/www/backups
          sudo chown -R $USER:$USER /var/www/data /var/www/uploads /var/www/backups

          # Initialize data files if they don't exist
          if [ ! -f "/var/www/data/reports.json" ]; then
            echo "[]" > /var/www/data/reports.json
          fi
          if [ ! -f "/var/www/data/config.json" ]; then
            echo "{}" > /var/www/data/config.json
          fi

          # Restart application with PM2
          echo "🔄 Restarting application"
          pm2 stop njdsc-compliance-portal || true
          pm2 delete njdsc-compliance-portal || true
          pm2 start server/app.js --name "njdsc-compliance-portal"
          pm2 save

          # Reload Nginx
          echo "🔄 Reloading Nginx"
          sudo nginx -t && sudo systemctl reload nginx

          echo "✅ Deployment completed successfully at $(date)"
          echo "🌐 Application available at: http://167.172.224.98"